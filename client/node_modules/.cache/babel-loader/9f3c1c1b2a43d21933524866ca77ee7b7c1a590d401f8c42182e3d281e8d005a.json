{"ast":null,"code":"var _jsxFileName = \"/home/dell/assignment/FilterPixel/image-processor-frontend/src/ImageUploader.js\",\n  _s = $RefreshSig$();\n// components/ImageUploader.js\nimport React, { useState } from \"react\";\nimport { useImage } from \"./ImageContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageUploader = () => {\n  _s();\n  const {\n    setImage,\n    setPreview\n  } = useImage(); // Access context to store image and preview\n  const [file, setFile] = useState(null); // Local state for file selection\n\n  // Handle file selection\n  const handleFileChange = e => {\n    setFile(e.target.files[0]);\n  };\n\n  // Upload the file to the backend and get a low-quality preview\n  const handleUpload = async () => {\n    const formData = new FormData();\n    formData.append(\"image\", file);\n    const response = await fetch(\"http://localhost:5000/upload\", {\n      method: \"POST\",\n      body: formData\n    });\n    const blob = await response.blob(); // Receive low-quality image blob from backend\n    const previewURL = URL.createObjectURL(blob);\n    setImage(file); // Save the original image\n    setPreview(previewURL); // Set the low-quality preview URL\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      children: \"Upload Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageUploader, \"Vt8hUSWtqaddJDEV7+Qc93d8RY4=\", false, function () {\n  return [useImage];\n});\n_c = ImageUploader;\nexport default ImageUploader;\nvar _c;\n$RefreshReg$(_c, \"ImageUploader\");","map":{"version":3,"names":["React","useState","useImage","jsxDEV","_jsxDEV","ImageUploader","_s","setImage","setPreview","file","setFile","handleFileChange","e","target","files","handleUpload","formData","FormData","append","response","fetch","method","body","blob","previewURL","URL","createObjectURL","children","type","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/dell/assignment/FilterPixel/image-processor-frontend/src/ImageUploader.js"],"sourcesContent":["// components/ImageUploader.js\nimport React, { useState } from \"react\";\nimport { useImage } from \"./ImageContext\";\n\nconst ImageUploader = () => {\n  const { setImage, setPreview } = useImage(); // Access context to store image and preview\n  const [file, setFile] = useState(null); // Local state for file selection\n\n  // Handle file selection\n  const handleFileChange = (e) => {\n    setFile(e.target.files[0]);\n  };\n\n  // Upload the file to the backend and get a low-quality preview\n  const handleUpload = async () => {\n    const formData = new FormData();\n    formData.append(\"image\", file);\n\n    const response = await fetch(\"http://localhost:5000/upload\", {\n      method: \"POST\",\n      body: formData,\n    });\n\n    const blob = await response.blob(); // Receive low-quality image blob from backend\n    const previewURL = URL.createObjectURL(blob);\n\n    setImage(file); // Save the original image\n    setPreview(previewURL); // Set the low-quality preview URL\n  };\n\n  return (\n    <div>\n      <input type=\"file\" accept=\"image/*\" onChange={handleFileChange} />\n      <button onClick={handleUpload}>Upload Image</button>\n    </div>\n  );\n};\n\nexport default ImageUploader;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,QAAQ,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM;IAAEC,QAAQ;IAAEC;EAAW,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACO,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAExC;EACA,MAAMU,gBAAgB,GAAIC,CAAC,IAAK;IAC9BF,OAAO,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EAC5B,CAAC;;EAED;EACA,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAET,IAAI,CAAC;IAE9B,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;MAC3DC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEN;IACR,CAAC,CAAC;IAEF,MAAMO,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC;IACpC,MAAMC,UAAU,GAAGC,GAAG,CAACC,eAAe,CAACH,IAAI,CAAC;IAE5ChB,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;IAChBD,UAAU,CAACgB,UAAU,CAAC,CAAC,CAAC;EAC1B,CAAC;EAED,oBACEpB,OAAA;IAAAuB,QAAA,gBACEvB,OAAA;MAAOwB,IAAI,EAAC,MAAM;MAACC,MAAM,EAAC,SAAS;MAACC,QAAQ,EAAEnB;IAAiB;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClE9B,OAAA;MAAQ+B,OAAO,EAAEpB,YAAa;MAAAY,QAAA,EAAC;IAAY;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjD,CAAC;AAEV,CAAC;AAAC5B,EAAA,CAhCID,aAAa;EAAA,QACgBH,QAAQ;AAAA;AAAAkC,EAAA,GADrC/B,aAAa;AAkCnB,eAAeA,aAAa;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}