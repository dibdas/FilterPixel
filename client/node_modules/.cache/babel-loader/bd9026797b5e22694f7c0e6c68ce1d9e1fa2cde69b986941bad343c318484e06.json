{"ast":null,"code":"var _jsxFileName = \"/home/dell/assignment/FilterPixel/image-processor-frontend/src/components/ImageUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from \"react\";\nimport { useImage } from \"../context/ImageContext\";\nimport Cropper from \"react-cropper\";\nimport \"cropperjs/dist/cropper.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageUpload = () => {\n  _s();\n  const {\n    setImage,\n    setPreview\n  } = useImage();\n  const [file, setFile] = useState(null);\n  const [cropper, setCropper] = useState(null);\n  const cropperRef = useRef(null);\n  const handleUpload = async event => {\n    const uploadedFile = event.target.files[0];\n    if (!uploadedFile) return;\n    const formData = new FormData();\n    formData.append(\"image\", uploadedFile);\n    setFile(URL.createObjectURL(uploadedFile));\n    setImage(uploadedFile);\n    try {\n      const response = await fetch(\"http://localhost:5000/api/images/upload/\", {\n        method: \"POST\",\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(`Upload failed: ${response.statusText}`);\n      }\n      const data = await response.json();\n      if (data.previewUrl) {\n        setPreview(data.previewUrl);\n      } else {\n        throw new Error(\"Preview URL not found in response\");\n      }\n    } catch (err) {\n      console.error(\"Error uploading image\", err.message);\n    }\n  };\n  const handleCrop = async () => {\n    if (!cropper) {\n      console.error(\"Cropper instance is not initialized\");\n      return;\n    }\n    const croppedCanvas = cropper.getCroppedCanvas();\n    if (!croppedCanvas) {\n      console.error(\"Unable to get cropped canvas\");\n      return;\n    }\n    const croppedImage = croppedCanvas.toDataURL();\n    setPreview(croppedImage);\n\n    // Send the cropped image to the backend for processing\n    try {\n      const response = await fetch(\"http://localhost:5000/api/images/process\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          image: croppedImage\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Error applying crop\");\n      }\n      const data = await response.json();\n      setPreview(data.previewUrl);\n    } catch (err) {\n      console.error(\"Error applying crop\", err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/png, image/jpeg\",\n      onChange: handleUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), file && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Cropper, {\n        src: file,\n        style: {\n          height: 400,\n          width: \"100%\"\n        },\n        initialAspectRatio: 1,\n        aspectRatio: 1,\n        guides: false,\n        cropBoxResizable: false,\n        ref: cropperRef,\n        onInitialized: instance => setCropper(instance)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCrop,\n        children: \"Crop and Process\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageUpload, \"EzYU365KSJlOwbSSc+NJlUpl9jc=\", false, function () {\n  return [useImage];\n});\n_c = ImageUpload;\nexport default ImageUpload;\nvar _c;\n$RefreshReg$(_c, \"ImageUpload\");","map":{"version":3,"names":["React","useRef","useState","useImage","Cropper","jsxDEV","_jsxDEV","ImageUpload","_s","setImage","setPreview","file","setFile","cropper","setCropper","cropperRef","handleUpload","event","uploadedFile","target","files","formData","FormData","append","URL","createObjectURL","response","fetch","method","body","ok","Error","statusText","data","json","previewUrl","err","console","error","message","handleCrop","croppedCanvas","getCroppedCanvas","croppedImage","toDataURL","headers","JSON","stringify","image","children","type","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","src","style","height","width","initialAspectRatio","aspectRatio","guides","cropBoxResizable","ref","onInitialized","instance","onClick","_c","$RefreshReg$"],"sources":["/home/dell/assignment/FilterPixel/image-processor-frontend/src/components/ImageUpload.js"],"sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { useImage } from \"../context/ImageContext\";\nimport Cropper from \"react-cropper\";\nimport \"cropperjs/dist/cropper.css\";\n\nconst ImageUpload = () => {\n  const { setImage, setPreview } = useImage();\n  const [file, setFile] = useState(null);\n  const [cropper, setCropper] = useState(null);\n  const cropperRef = useRef(null);\n\n  const handleUpload = async (event) => {\n    const uploadedFile = event.target.files[0];\n    if (!uploadedFile) return;\n\n    const formData = new FormData();\n    formData.append(\"image\", uploadedFile);\n\n    setFile(URL.createObjectURL(uploadedFile));\n    setImage(uploadedFile);\n\n    try {\n      const response = await fetch(\"http://localhost:5000/api/images/upload/\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error(`Upload failed: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      if (data.previewUrl) {\n        setPreview(data.previewUrl);\n      } else {\n        throw new Error(\"Preview URL not found in response\");\n      }\n    } catch (err) {\n      console.error(\"Error uploading image\", err.message);\n    }\n  };\n\n  const handleCrop = async () => {\n    if (!cropper) {\n      console.error(\"Cropper instance is not initialized\");\n      return;\n    }\n\n    const croppedCanvas = cropper.getCroppedCanvas();\n    if (!croppedCanvas) {\n      console.error(\"Unable to get cropped canvas\");\n      return;\n    }\n\n    const croppedImage = croppedCanvas.toDataURL();\n    setPreview(croppedImage);\n\n    // Send the cropped image to the backend for processing\n    try {\n      const response = await fetch(\"http://localhost:5000/api/images/process\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ image: croppedImage }),\n      });\n      if (!response.ok) {\n        throw new Error(\"Error applying crop\");\n      }\n      const data = await response.json();\n      setPreview(data.previewUrl);\n    } catch (err) {\n      console.error(\"Error applying crop\", err);\n    }\n  };\n\n  return (\n    <div>\n      <input\n        type=\"file\"\n        accept=\"image/png, image/jpeg\"\n        onChange={handleUpload}\n      />\n      {file && (\n        <div>\n          <Cropper\n            src={file}\n            style={{ height: 400, width: \"100%\" }}\n            initialAspectRatio={1}\n            aspectRatio={1}\n            guides={false}\n            cropBoxResizable={false}\n            ref={cropperRef}\n            onInitialized={(instance) => setCropper(instance)}\n          />\n          <button onClick={handleCrop}>Crop and Process</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ImageUpload;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,OAAOC,OAAO,MAAM,eAAe;AACnC,OAAO,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM;IAAEC,QAAQ;IAAEC;EAAW,CAAC,GAAGP,QAAQ,CAAC,CAAC;EAC3C,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAMa,UAAU,GAAGd,MAAM,CAAC,IAAI,CAAC;EAE/B,MAAMe,YAAY,GAAG,MAAOC,KAAK,IAAK;IACpC,MAAMC,YAAY,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC1C,IAAI,CAACF,YAAY,EAAE;IAEnB,MAAMG,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEL,YAAY,CAAC;IAEtCN,OAAO,CAACY,GAAG,CAACC,eAAe,CAACP,YAAY,CAAC,CAAC;IAC1CT,QAAQ,CAACS,YAAY,CAAC;IAEtB,IAAI;MACF,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,0CAA0C,EAAE;QACvEC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAER;MACR,CAAC,CAAC;MAEF,IAAI,CAACK,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,kBAAkBL,QAAQ,CAACM,UAAU,EAAE,CAAC;MAC1D;MAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,CAACE,UAAU,EAAE;QACnBzB,UAAU,CAACuB,IAAI,CAACE,UAAU,CAAC;MAC7B,CAAC,MAAM;QACL,MAAM,IAAIJ,KAAK,CAAC,mCAAmC,CAAC;MACtD;IACF,CAAC,CAAC,OAAOK,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,GAAG,CAACG,OAAO,CAAC;IACrD;EACF,CAAC;EAED,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI,CAAC3B,OAAO,EAAE;MACZwB,OAAO,CAACC,KAAK,CAAC,qCAAqC,CAAC;MACpD;IACF;IAEA,MAAMG,aAAa,GAAG5B,OAAO,CAAC6B,gBAAgB,CAAC,CAAC;IAChD,IAAI,CAACD,aAAa,EAAE;MAClBJ,OAAO,CAACC,KAAK,CAAC,8BAA8B,CAAC;MAC7C;IACF;IAEA,MAAMK,YAAY,GAAGF,aAAa,CAACG,SAAS,CAAC,CAAC;IAC9ClC,UAAU,CAACiC,YAAY,CAAC;;IAExB;IACA,IAAI;MACF,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,0CAA0C,EAAE;QACvEC,MAAM,EAAE,MAAM;QACdiB,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/ChB,IAAI,EAAEiB,IAAI,CAACC,SAAS,CAAC;UAAEC,KAAK,EAAEL;QAAa,CAAC;MAC9C,CAAC,CAAC;MACF,IAAI,CAACjB,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;MACxC;MACA,MAAME,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClCxB,UAAU,CAACuB,IAAI,CAACE,UAAU,CAAC;IAC7B,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEF,GAAG,CAAC;IAC3C;EACF,CAAC;EAED,oBACE9B,OAAA;IAAA2C,QAAA,gBACE3C,OAAA;MACE4C,IAAI,EAAC,MAAM;MACXC,MAAM,EAAC,uBAAuB;MAC9BC,QAAQ,EAAEpC;IAAa;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,EACD7C,IAAI,iBACHL,OAAA;MAAA2C,QAAA,gBACE3C,OAAA,CAACF,OAAO;QACNqD,GAAG,EAAE9C,IAAK;QACV+C,KAAK,EAAE;UAAEC,MAAM,EAAE,GAAG;UAAEC,KAAK,EAAE;QAAO,CAAE;QACtCC,kBAAkB,EAAE,CAAE;QACtBC,WAAW,EAAE,CAAE;QACfC,MAAM,EAAE,KAAM;QACdC,gBAAgB,EAAE,KAAM;QACxBC,GAAG,EAAElD,UAAW;QAChBmD,aAAa,EAAGC,QAAQ,IAAKrD,UAAU,CAACqD,QAAQ;MAAE;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnD,CAAC,eACFlD,OAAA;QAAQ8D,OAAO,EAAE5B,UAAW;QAAAS,QAAA,EAAC;MAAgB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAChD,EAAA,CA7FID,WAAW;EAAA,QACkBJ,QAAQ;AAAA;AAAAkE,EAAA,GADrC9D,WAAW;AA+FjB,eAAeA,WAAW;AAAC,IAAA8D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}